import { ISystemPseudoRandomNumberGenerator } from '../../../client/datascience/types';
import { assert } from 'chai';
import { Disposable } from 'vscode';
import { DataScienceIocContainer } from '../dataScienceIocContainer';

suite('DataScience - RandomBytes', () => {
    const disposables: Disposable[] = [];
    let prng: ISystemPseudoRandomNumberGenerator;
    let ioc: DataScienceIocContainer;
    setup(() => {
        ioc = new DataScienceIocContainer();
        ioc.registerDataScienceTypes();
        ioc.activate();
        prng = ioc.get<ISystemPseudoRandomNumberGenerator>(ISystemPseudoRandomNumberGenerator);
    });

    teardown(async () => {
        for (const disposable of disposables) {
            if (!disposable) {
                continue;
            }
            // tslint:disable-next-line:no-any
            const promise = disposable.dispose() as Promise<any>;
            if (promise) {
                await promise;
            }
        }
        await ioc.dispose();
        delete (global as any).ascquireVsCodeApi;
    });

    test('Generate random bytes', async () => {
        const numRequestedBytes = 1024;
        const generatedBytes = await prng.randomBytes(numRequestedBytes);
        const numGeneratedBytes = generatedBytes.length;
        assert.ok(
            numGeneratedBytes === numRequestedBytes,
            `Expected to generate ${numRequestedBytes} random bytes but instead generated ${numGeneratedBytes} random bytes`
        );
        assert.ok(generatedBytes.filter((byte) => byte !== 0).length > 0, `Generated bytes are all null`);
    });
});
